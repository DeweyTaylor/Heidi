/*
 * Copyright 2011, The Haiku Project. All rights reserved.
 * Distributed under the terms of the MIT License.
 *
 * Authors:
 *		Artwork: Michele Frau (a.k.a. zuMi)
 *				 Humdinger
 *		Stephan AÃŸmus <superstippi@gmx.de>
 */


#include "ToolBarIcons.h"

#include <new>
#include <stdio.h>
#include <string.h>

#include <Bitmap.h>
#include <IconUtils.h>


const unsigned char kBuild[] = {
	0x6e, 0x63, 0x69, 0x66, 0x03, 0x05, 0x00, 0x02, 0x03, 0x06, 0x02, 0x3d,
	0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0xa0, 0x00, 0x49,
	0x80, 0x00, 0x48, 0xa0, 0x00, 0x37, 0xff, 0xaa, 0x00, 0x95, 0x9e, 0x6a,
	0x04, 0x02, 0x01, 0x16, 0x02, 0x3d, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x3c, 0xa0, 0x00, 0x48, 0xe0, 0x00, 0x46, 0x80, 0x00, 0x00,
	0xd1, 0xff, 0x5c, 0x04, 0x06, 0x0f, 0xca, 0x71, 0x44, 0x04, 0x2c, 0x2c,
	0x34, 0x30, 0x3e, 0x3e, 0x48, 0x3f, 0x40, 0x3e, 0x4a, 0x5c, 0x46, 0x46,
	0x48, 0x46, 0x4a, 0x45, 0x40, 0x30, 0x54, 0x28, 0x46, 0x26, 0x3e, 0x28,
	0x34, 0x0a, 0x05, 0x2c, 0x2c, 0x34, 0x30, 0x54, 0x30, 0x54, 0x28, 0x34,
	0x28, 0x06, 0x06, 0x1e, 0x07, 0x3e, 0x26, 0x3e, 0xc2, 0xe5, 0x3f, 0x40,
	0x3e, 0x50, 0x5c, 0x46, 0x46, 0x48, 0x46, 0x50, 0x45, 0x40, 0x26, 0x0a,
	0x03, 0x3f, 0x30, 0x42, 0x30, 0x45, 0x30, 0x06, 0x0a, 0x00, 0x01, 0x00,
	0x12, 0x3f, 0x6f, 0xe5, 0x3e, 0x0b, 0xca, 0xbe, 0x0b, 0xca, 0x3f, 0x6f,
	0xe5, 0x48, 0x0c, 0x43, 0xc6, 0xee, 0x5e, 0x01, 0x17, 0x84, 0x02, 0x04,
	0x0a, 0x00, 0x01, 0x00, 0x1a, 0x3f, 0x6f, 0xe5, 0x3e, 0x0b, 0xca, 0xbe,
	0x0b, 0xca, 0x3f, 0x6f, 0xe5, 0x48, 0x0c, 0x43, 0xc6, 0xee, 0x5e, 0x00,
	0x13, 0x01, 0x17, 0x84, 0x02, 0x04, 0x0a, 0x01, 0x01, 0x02, 0x02, 0x3f,
	0x6f, 0xe5, 0x3e, 0x0b, 0xca, 0xbe, 0x0b, 0xca, 0x3f, 0x6f, 0xe5, 0x48,
	0x0c, 0x43, 0xc6, 0xee, 0x5e, 0x0a, 0x00, 0x01, 0x03, 0x12, 0x3f, 0x6f,
	0xe5, 0x3e, 0x0b, 0xca, 0xbe, 0x0b, 0xca, 0x3f, 0x6f, 0xe5, 0x47, 0xf7,
	0xca, 0xc6, 0xb7, 0x60, 0x01, 0x17, 0x82, 0x00, 0x04, 0x0a, 0x02, 0x01,
	0x01, 0x02, 0x3f, 0x6f, 0xe5, 0x3e, 0x0b, 0xca, 0xbe, 0x0b, 0xca, 0x3f,
	0x6f, 0xe5, 0x48, 0x0c, 0x43, 0xc6, 0xee, 0x5e, 0x0a, 0x00, 0x01, 0x03,
	0x12, 0x3f, 0x6f, 0xe5, 0x3e, 0x0b, 0xca, 0xbc, 0x0b, 0xca, 0x3d, 0x6f,
	0xe5, 0x48, 0x14, 0x72, 0xc7, 0x09, 0xdd, 0x01, 0x17, 0x82, 0x00, 0x04
};

const unsigned char kRun[] = {
	0x6e, 0x63, 0x69, 0x66, 0x03, 0x04, 0x00, 0x66, 0x03, 0x00, 0x59, 0x00,
	0x02, 0x00, 0x06, 0x02, 0x00, 0x00, 0x00, 0x3c, 0x60, 0x00, 0xc0, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x48, 0xa0, 0x00, 0x00, 0x80,
	0xff, 0x80, 0xff, 0x00, 0xb2, 0x00, 0x01, 0x0a, 0x03, 0x46, 0x35, 0x24,
	0xb3, 0xcb, 0x24, 0x48, 0x03, 0x0a, 0x00, 0x01, 0x00, 0x30, 0x2e, 0x2d,
	0x01, 0x17, 0x83, 0x22, 0x04, 0x0a, 0x01, 0x01, 0x00, 0x30, 0x2c, 0x2b,
	0x01, 0x17, 0x83, 0x22, 0x04, 0x0a, 0x02, 0x01, 0x00, 0x20, 0x2c, 0x2b
};


const unsigned char kRunDebug[] = {
	0x6e, 0x63, 0x69, 0x66, 0x0b, 0x03, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,
	0x00, 0x5a, 0x02, 0x00, 0x06, 0x04, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x49, 0x40, 0x00, 0x4b, 0x00, 0x00,
	0x00, 0xff, 0x9e, 0x06, 0x3f, 0xf7, 0xf3, 0x78, 0xd7, 0xff, 0xea, 0x97,
	0xff, 0xff, 0xb9, 0x4b, 0x02, 0x00, 0x06, 0x04, 0xbc, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x49, 0x40, 0x00, 0x4b,
	0x00, 0x00, 0x00, 0x38, 0xbc, 0x38, 0x2b, 0x27, 0x91, 0x27, 0xd2, 0x53,
	0xed, 0x53, 0xff, 0x2e, 0xaa, 0x2e, 0x02, 0x00, 0x06, 0x02, 0x3a, 0x9d,
	0x43, 0x3b, 0xa9, 0xa6, 0xbc, 0xd9, 0x48, 0x3c, 0x08, 0x8a, 0x4a, 0x42,
	0xa9, 0x42, 0x8a, 0x8a, 0x00, 0x6e, 0xff, 0x6e, 0xff, 0x41, 0xca, 0x41,
	0x02, 0x01, 0x16, 0x03, 0x3c, 0x49, 0x60, 0x36, 0xd7, 0x75, 0xb5, 0x9e,
	0x6b, 0x3a, 0xe9, 0x7a, 0x48, 0xfd, 0xab, 0x48, 0x00, 0xd9, 0x00, 0xea,
	0x93, 0xbd, 0xff, 0x53, 0x02, 0x00, 0x16, 0x03, 0x3a, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x49, 0x40, 0x00, 0x47,
	0x00, 0x00, 0x00, 0xc5, 0x3f, 0xee, 0xff, 0x82, 0x02, 0x00, 0x16, 0x02,
	0x39, 0x6b, 0xae, 0x3b, 0xc2, 0xa7, 0xba, 0xec, 0xe8, 0x38, 0xa9, 0x3e,
	0x4a, 0x5d, 0xf5, 0x46, 0x98, 0xef, 0x00, 0xf3, 0xff, 0xd7, 0x02, 0x00,
	0x16, 0x02, 0x3a, 0x6f, 0xfe, 0x3b, 0x9f, 0xea, 0xbc, 0xbf, 0xba, 0x3b,
	0xb2, 0x78, 0x4b, 0xb1, 0xee, 0x46, 0x16, 0xce, 0x00, 0xff, 0xff, 0x9e,
	0x02, 0x00, 0x06, 0x03, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x3c, 0x00, 0x00, 0x49, 0x40, 0x00, 0x4b, 0x00, 0x00, 0x00, 0xff,
	0x06, 0x06, 0x3d, 0xff, 0x47, 0x06, 0xff, 0xd6, 0x05, 0x05, 0x02, 0x00,
	0x16, 0x03, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c,
	0x00, 0x00, 0x49, 0x40, 0x00, 0x4b, 0x00, 0x00, 0x00, 0xe1, 0x3f, 0xff,
	0xff, 0xcd, 0x0c, 0x02, 0x06, 0x3a, 0x28, 0xc0, 0xe0, 0x28, 0xb9, 0xd5,
	0x28, 0x2a, 0x32, 0x2a, 0xb7, 0xf8, 0x2a, 0x32, 0x2a, 0x52, 0x2a, 0x52,
	0x2a, 0xc9, 0x8e, 0x3a, 0x5e, 0xb9, 0xd5, 0x5e, 0xc0, 0xe0, 0x5e, 0x4a,
	0x52, 0x4a, 0xc9, 0x8e, 0x4a, 0x52, 0x4a, 0x32, 0x4a, 0x32, 0x4a, 0xb7,
	0xf8, 0x02, 0x06, 0x3a, 0x3c, 0xc0, 0xe0, 0x3c, 0xb9, 0xd5, 0x3c, 0x2a,
	0x32, 0x2a, 0xbc, 0x5e, 0x2a, 0x32, 0x2a, 0x4e, 0x2a, 0x4e, 0x2a, 0xc7,
	0xf6, 0x3a, 0x5a, 0xb9, 0xd5, 0x5a, 0xc0, 0xe0, 0x5a, 0x4a, 0x4e, 0x4a,
	0xc7, 0xf6, 0x4a, 0x4e, 0x4a, 0x32, 0x4a, 0x32, 0x4a, 0xbc, 0x5e, 0x02,
	0x06, 0x3a, 0x5a, 0xc0, 0xe0, 0x5a, 0xb9, 0xd5, 0x5a, 0x2a, 0x4e, 0x2a,
	0xc7, 0xf6, 0x2a, 0x4e, 0x2a, 0x52, 0x2a, 0x52, 0x2a, 0xc9, 0x8e, 0x3a,
	0x5e, 0xb9, 0xd5, 0x5e, 0xc0, 0xe0, 0x5e, 0x4a, 0x52, 0x4a, 0xc9, 0x8e,
	0x4a, 0x52, 0x4a, 0x4e, 0x4a, 0x4e, 0x4a, 0xc7, 0xf6, 0x02, 0x04, 0x2a,
	0x32, 0x2a, 0xbc, 0x5e, 0x2a, 0xb7, 0xf8, 0x3a, 0x28, 0xb9, 0xd5, 0x28,
	0xc0, 0xe0, 0x28, 0x4a, 0x32, 0x4a, 0xb7, 0xf8, 0x4a, 0xbc, 0x5e, 0x3a,
	0x3c, 0xc0, 0xe0, 0x3c, 0xb9, 0xd5, 0x3c, 0x02, 0x04, 0x48, 0x32, 0x48,
	0x2c, 0x48, 0xbb, 0xed, 0x3a, 0x3a, 0xc0, 0x70, 0x3a, 0xba, 0x46, 0x3a,
	0x2c, 0x32, 0x2c, 0xbb, 0xed, 0x2c, 0x2c, 0x3a, 0x28, 0xba, 0x46, 0x28,
	0xc0, 0x70, 0x28, 0x02, 0x06, 0x32, 0x26, 0x32, 0x26, 0x32, 0xb4, 0x81,
	0x3a, 0x22, 0xbb, 0x99, 0x22, 0xbf, 0x1d, 0x22, 0x42, 0x26, 0x42, 0xb4,
	0x81, 0x42, 0x26, 0x42, 0x2c, 0x42, 0x2c, 0x42, 0xb8, 0xa8, 0x3a, 0x30,
	0xbf, 0x1d, 0x30, 0xbb, 0x99, 0x30, 0x32, 0x2c, 0x32, 0xb8, 0xa8, 0x32,
	0x2c, 0x06, 0x05, 0xe3, 0x03, 0x50, 0x48, 0xc9, 0xa4, 0x48, 0x50, 0x48,
	0x4c, 0x3a, 0x60, 0x50, 0x60, 0x50, 0x60, 0xc9, 0xa4, 0x60, 0x60, 0x54,
	0x60, 0xca, 0x5a, 0x60, 0xc5, 0x13, 0x08, 0x02, 0x51, 0x39, 0x5b, 0x2c,
	0x08, 0x02, 0x51, 0x2c, 0x5b, 0x39, 0x08, 0x02, 0x4f, 0x32, 0x5d, 0x32,
	0x02, 0x04, 0xbd, 0x2e, 0xbf, 0xcb, 0xbf, 0xf0, 0xc0, 0x3b, 0xba, 0x6c,
	0xbf, 0x5c, 0xb8, 0x5a, 0xc2, 0x42, 0xb8, 0xba, 0xbf, 0xe5, 0xb8, 0x02,
	0xc4, 0x6e, 0xbb, 0xef, 0xc7, 0xaa, 0xb9, 0x95, 0xc7, 0x2c, 0xbe, 0x4a,
	0xc8, 0x29, 0xc1, 0x04, 0xc3, 0xa1, 0xc0, 0xab, 0xc5, 0xcd, 0xc1, 0x62,
	0xc1, 0x43, 0x04, 0x03, 0x2e, 0x2f, 0x4f, 0xbc, 0x7b, 0xc4, 0x33, 0xba,
	0xa0, 0xc5, 0x25, 0x3e, 0x48, 0x41, 0x44, 0x10, 0x0a, 0x01, 0x01, 0x06,
	0x00, 0x0a, 0x00, 0x01, 0x00, 0x10, 0x01, 0x17, 0x84, 0x22, 0x04, 0x0a,
	0x02, 0x01, 0x01, 0x00, 0x0a, 0x03, 0x01, 0x02, 0x00, 0x0a, 0x04, 0x01,
	0x03, 0x00, 0x0a, 0x05, 0x01, 0x04, 0x00, 0x0a, 0x00, 0x01, 0x05, 0x10,
	0x01, 0x17, 0x84, 0x22, 0x04, 0x0a, 0x06, 0x01, 0x05, 0x00, 0x0a, 0x08,
	0x01, 0x03, 0x02, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x3d, 0x33, 0x33, 0x47, 0x40, 0x00, 0xc0, 0x66, 0x66, 0x0a, 0x07, 0x01,
	0x03, 0x0a, 0x3d, 0x5b, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c,
	0x44, 0x28, 0x47, 0xc1, 0x6a, 0x3e, 0xe9, 0x76, 0x15, 0xff, 0x0a, 0x00,
	0x01, 0x03, 0x0a, 0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x3b, 0x33, 0x33, 0x48, 0x38, 0x00, 0x46, 0x19, 0x99, 0x15, 0xff, 0x0a,
	0x09, 0x01, 0x0a, 0x10, 0x01, 0x15, 0x85, 0x00, 0x04, 0x0a, 0x0a, 0x01,
	0x0a, 0x00, 0x0a, 0x00, 0x03, 0x07, 0x08, 0x09, 0x30, 0x02, 0x37, 0x01,
	0x17, 0x83, 0x20, 0x04, 0x0a, 0x00, 0x01, 0x03, 0x02, 0x3b, 0xff, 0xff,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0xcc, 0xcc, 0x48, 0x30, 0x00,
	0x49, 0xac, 0xcc, 0x0a, 0x09, 0x01, 0x0b, 0x18, 0x15, 0xff, 0x01, 0x17,
	0x83, 0x20, 0x04
};


struct IconData {
	const uint8*	data;
	size_t			size;
	BBitmap*		bitmap;
};


static IconData kIcons[] = {
	{ kBuild, sizeof(kBuild), NULL },
	{ kRun, sizeof(kRun), NULL },
	{ kRunDebug, sizeof(kRunDebug), NULL }
};


status_t
init_tool_bar_icons()
{
	const int32 toolBarIconsSize = 40;
	const int32 iconRenderSize = max_c(toolBarIconsSize, 32);

	BBitmap bitmap(BRect(0, 0, iconRenderSize - 1, iconRenderSize - 1),
		B_BITMAP_NO_SERVER_LINK, B_RGBA32);

	for (uint32 i = 0; i < sizeof(kIcons) / sizeof(IconData); i++) {
		status_t ret = BIconUtils::GetVectorIcon(kIcons[i].data,
			kIcons[i].size, &bitmap);
		if (ret != B_OK)
			return ret;
		kIcons[i].bitmap = new(std::nothrow) BBitmap(BRect(0, 0,
			toolBarIconsSize - 1, toolBarIconsSize - 1), 0, B_RGBA32);
		if (kIcons[i].bitmap == NULL)
			return B_NO_MEMORY;
		ret = kIcons[i].bitmap->InitCheck();
		if (ret != B_OK)
			return ret;
		uint8* src = reinterpret_cast<uint8*>(bitmap.Bits());
		uint32 srcBPR = bitmap.BytesPerRow();
		uint8* dst = reinterpret_cast<uint8*>(kIcons[i].bitmap->Bits());
		uint32 dstBPR = kIcons[i].bitmap->BytesPerRow();
		for (int32 y = 0; y < toolBarIconsSize; y++) {
			memcpy(dst, src, 4 * toolBarIconsSize);
			src += srcBPR;
			dst += dstBPR;
		}
	}

	// Initializing 14 icons on startup takes about 10ms on a Core2Duo @ 2GHz.

	return B_OK;
}


void
uninit_tool_bar_icons()
{
	for (uint32 i = 0; i < sizeof(kIcons) / sizeof(IconData); i++) {
		delete kIcons[i].bitmap;
		kIcons[i].bitmap = NULL;
	}
}


const BBitmap*
tool_bar_icon(uint32 which)
{
	if (which >= sizeof(kIcons) / sizeof(IconData))
		return NULL;
	return kIcons[which].bitmap;
}

